generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Facility {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  facilityName String   @map("facility_name") @db.VarChar(256)
  state        String   @db.VarChar(100)
  city         String   @db.VarChar(100)
  zipCode      String   @map("zip_code") @db.VarChar(10)

  @@map("facility")
}

model InmateContact {
  id               Int                    @id @default(autoincrement())
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  deleted          Boolean                @default(false)
  firstName        String                 @map("first_name") @db.VarChar(255)
  lastName         String                 @map("last_name") @db.VarChar(255)
  inmateId         String                 @map("inmate_id") @db.VarChar(255)
  facilityName     String                 @map("facility_name") @db.VarChar(255)
  facilityState    String                 @map("facility_state") @db.VarChar(100)
  facilityCity     String                 @map("facility_city") @db.VarChar(100)
  facilityZipCode  String                 @map("facility_zip_code") @db.VarChar(10)
  creatorId        Int                    @map("creator_id")
  creator          User                   @relation(fields: [creatorId], references: [id])
  contactImage     InmateContactImage?
  mailingAddresses InmateMailingAddress[]

  @@map("inmate_conact")
}

model InmateContactImage {
  inmateContactId Int           @id @map("inmate_contact_id")
  image           Bytes
  mimetype        String        @db.VarChar(255)
  inmateContact   InmateContact @relation(fields: [inmateContactId], references: [id])

  @@map("inmate_contact_image")
}

model InmateMailingAddress {
  inmateContactId Int           @map("inmate_contact_id")
  order           Int
  mailingAddress  String        @map("mailing_address") @db.VarChar(255)
  inmateContact   InmateContact @relation(fields: [inmateContactId], references: [id])


  @@id([inmateContactId, order])
  @@map("inmate_mailing_address")
}

model User {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  deleted        Boolean         @default(false)
  name           String          @db.VarChar(256)
  email          String          @unique @db.VarChar(255)
  passwordHash   String          @map("password_hash") @db.VarChar(255)
  active         Boolean
  inmateContacts InmateContact[]
  userImage      UserImage?

  @@map("user")
}

model UserImage {
  userId   Int    @id @map("user_id")
  image    Bytes
  mimetype String @db.VarChar(255)
  user     User   @relation(fields: [userId], references: [id])

  @@map("user_image")
}
